// Code generated by "enumer -type=OrderStatus -json -transform=snake -trimprefix=OrderStatus"; DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _OrderStatusName = "createdpayment_successpayment_failuresuccessfailure"

var _OrderStatusIndex = [...]uint8{0, 7, 22, 37, 44, 51}

const _OrderStatusLowerName = "createdpayment_successpayment_failuresuccessfailure"

func (i OrderStatus) String() string {
	if i < 0 || i >= OrderStatus(len(_OrderStatusIndex)-1) {
		return fmt.Sprintf("OrderStatus(%d)", i)
	}
	return _OrderStatusName[_OrderStatusIndex[i]:_OrderStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OrderStatusNoOp() {
	var x [1]struct{}
	_ = x[OrderStatusCreated-(0)]
	_ = x[OrderStatusPaymentSuccess-(1)]
	_ = x[OrderStatusPaymentFailure-(2)]
	_ = x[OrderStatusSuccess-(3)]
	_ = x[OrderStatusFailure-(4)]
}

var _OrderStatusValues = []OrderStatus{OrderStatusCreated, OrderStatusPaymentSuccess, OrderStatusPaymentFailure, OrderStatusSuccess, OrderStatusFailure}

var _OrderStatusNameToValueMap = map[string]OrderStatus{
	_OrderStatusName[0:7]:        OrderStatusCreated,
	_OrderStatusLowerName[0:7]:   OrderStatusCreated,
	_OrderStatusName[7:22]:       OrderStatusPaymentSuccess,
	_OrderStatusLowerName[7:22]:  OrderStatusPaymentSuccess,
	_OrderStatusName[22:37]:      OrderStatusPaymentFailure,
	_OrderStatusLowerName[22:37]: OrderStatusPaymentFailure,
	_OrderStatusName[37:44]:      OrderStatusSuccess,
	_OrderStatusLowerName[37:44]: OrderStatusSuccess,
	_OrderStatusName[44:51]:      OrderStatusFailure,
	_OrderStatusLowerName[44:51]: OrderStatusFailure,
}

var _OrderStatusNames = []string{
	_OrderStatusName[0:7],
	_OrderStatusName[7:22],
	_OrderStatusName[22:37],
	_OrderStatusName[37:44],
	_OrderStatusName[44:51],
}

// OrderStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OrderStatusString(s string) (OrderStatus, error) {
	if val, ok := _OrderStatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OrderStatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OrderStatus values", s)
}

// OrderStatusValues returns all values of the enum
func OrderStatusValues() []OrderStatus {
	return _OrderStatusValues
}

// OrderStatusStrings returns a slice of all String values of the enum
func OrderStatusStrings() []string {
	strs := make([]string, len(_OrderStatusNames))
	copy(strs, _OrderStatusNames)
	return strs
}

// IsAOrderStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OrderStatus) IsAOrderStatus() bool {
	for _, v := range _OrderStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for OrderStatus
func (i OrderStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for OrderStatus
func (i *OrderStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("OrderStatus should be a string, got %s", data)
	}

	var err error
	*i, err = OrderStatusString(s)
	return err
}
