// Code generated by "enumer -type=PaymentMode -json -transform=snake -trimprefix=PaymentMode"; DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _PaymentModeName = "cardgoogle_payapple_paysoforttrustlybancontactidealblik"

var _PaymentModeIndex = [...]uint8{0, 4, 14, 23, 29, 36, 46, 51, 55}

const _PaymentModeLowerName = "cardgoogle_payapple_paysoforttrustlybancontactidealblik"

func (i PaymentMode) String() string {
	if i < 0 || i >= PaymentMode(len(_PaymentModeIndex)-1) {
		return fmt.Sprintf("PaymentMode(%d)", i)
	}
	return _PaymentModeName[_PaymentModeIndex[i]:_PaymentModeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _PaymentModeNoOp() {
	var x [1]struct{}
	_ = x[PaymentModeCard-(0)]
	_ = x[PaymentModeGooglePay-(1)]
	_ = x[PaymentModeApplePay-(2)]
	_ = x[PaymentModeSofort-(3)]
	_ = x[PaymentModeTrustly-(4)]
	_ = x[PaymentModeBancontact-(5)]
	_ = x[PaymentModeIdeal-(6)]
	_ = x[PaymentModeBlik-(7)]
}

var _PaymentModeValues = []PaymentMode{PaymentModeCard, PaymentModeGooglePay, PaymentModeApplePay, PaymentModeSofort, PaymentModeTrustly, PaymentModeBancontact, PaymentModeIdeal, PaymentModeBlik}

var _PaymentModeNameToValueMap = map[string]PaymentMode{
	_PaymentModeName[0:4]:        PaymentModeCard,
	_PaymentModeLowerName[0:4]:   PaymentModeCard,
	_PaymentModeName[4:14]:       PaymentModeGooglePay,
	_PaymentModeLowerName[4:14]:  PaymentModeGooglePay,
	_PaymentModeName[14:23]:      PaymentModeApplePay,
	_PaymentModeLowerName[14:23]: PaymentModeApplePay,
	_PaymentModeName[23:29]:      PaymentModeSofort,
	_PaymentModeLowerName[23:29]: PaymentModeSofort,
	_PaymentModeName[29:36]:      PaymentModeTrustly,
	_PaymentModeLowerName[29:36]: PaymentModeTrustly,
	_PaymentModeName[36:46]:      PaymentModeBancontact,
	_PaymentModeLowerName[36:46]: PaymentModeBancontact,
	_PaymentModeName[46:51]:      PaymentModeIdeal,
	_PaymentModeLowerName[46:51]: PaymentModeIdeal,
	_PaymentModeName[51:55]:      PaymentModeBlik,
	_PaymentModeLowerName[51:55]: PaymentModeBlik,
}

var _PaymentModeNames = []string{
	_PaymentModeName[0:4],
	_PaymentModeName[4:14],
	_PaymentModeName[14:23],
	_PaymentModeName[23:29],
	_PaymentModeName[29:36],
	_PaymentModeName[36:46],
	_PaymentModeName[46:51],
	_PaymentModeName[51:55],
}

// PaymentModeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PaymentModeString(s string) (PaymentMode, error) {
	if val, ok := _PaymentModeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _PaymentModeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to PaymentMode values", s)
}

// PaymentModeValues returns all values of the enum
func PaymentModeValues() []PaymentMode {
	return _PaymentModeValues
}

// PaymentModeStrings returns a slice of all String values of the enum
func PaymentModeStrings() []string {
	strs := make([]string, len(_PaymentModeNames))
	copy(strs, _PaymentModeNames)
	return strs
}

// IsAPaymentMode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i PaymentMode) IsAPaymentMode() bool {
	for _, v := range _PaymentModeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for PaymentMode
func (i PaymentMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for PaymentMode
func (i *PaymentMode) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("PaymentMode should be a string, got %s", data)
	}

	var err error
	*i, err = PaymentModeString(s)
	return err
}
