// Code generated by "enumer -type=CryptoWalletStatus -json -transform=snake -trimprefix=CryptoWalletStatus"; DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _CryptoWalletStatusName = "activedeactivated"

var _CryptoWalletStatusIndex = [...]uint8{0, 6, 17}

const _CryptoWalletStatusLowerName = "activedeactivated"

func (i CryptoWalletStatus) String() string {
	if i < 0 || i >= CryptoWalletStatus(len(_CryptoWalletStatusIndex)-1) {
		return fmt.Sprintf("CryptoWalletStatus(%d)", i)
	}
	return _CryptoWalletStatusName[_CryptoWalletStatusIndex[i]:_CryptoWalletStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _CryptoWalletStatusNoOp() {
	var x [1]struct{}
	_ = x[CryptoWalletStatusActive-(0)]
	_ = x[CryptoWalletStatusDeactivated-(1)]
}

var _CryptoWalletStatusValues = []CryptoWalletStatus{CryptoWalletStatusActive, CryptoWalletStatusDeactivated}

var _CryptoWalletStatusNameToValueMap = map[string]CryptoWalletStatus{
	_CryptoWalletStatusName[0:6]:       CryptoWalletStatusActive,
	_CryptoWalletStatusLowerName[0:6]:  CryptoWalletStatusActive,
	_CryptoWalletStatusName[6:17]:      CryptoWalletStatusDeactivated,
	_CryptoWalletStatusLowerName[6:17]: CryptoWalletStatusDeactivated,
}

var _CryptoWalletStatusNames = []string{
	_CryptoWalletStatusName[0:6],
	_CryptoWalletStatusName[6:17],
}

// CryptoWalletStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CryptoWalletStatusString(s string) (CryptoWalletStatus, error) {
	if val, ok := _CryptoWalletStatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _CryptoWalletStatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CryptoWalletStatus values", s)
}

// CryptoWalletStatusValues returns all values of the enum
func CryptoWalletStatusValues() []CryptoWalletStatus {
	return _CryptoWalletStatusValues
}

// CryptoWalletStatusStrings returns a slice of all String values of the enum
func CryptoWalletStatusStrings() []string {
	strs := make([]string, len(_CryptoWalletStatusNames))
	copy(strs, _CryptoWalletStatusNames)
	return strs
}

// IsACryptoWalletStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CryptoWalletStatus) IsACryptoWalletStatus() bool {
	for _, v := range _CryptoWalletStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for CryptoWalletStatus
func (i CryptoWalletStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for CryptoWalletStatus
func (i *CryptoWalletStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CryptoWalletStatus should be a string, got %s", data)
	}

	var err error
	*i, err = CryptoWalletStatusString(s)
	return err
}
