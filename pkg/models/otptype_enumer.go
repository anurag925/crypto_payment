// Code generated by "enumer -type=OtpType -json -transform=snake -trimprefix=OtpType"; DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _OtpTypeName = "emailmobile"

var _OtpTypeIndex = [...]uint8{0, 5, 11}

const _OtpTypeLowerName = "emailmobile"

func (i OtpType) String() string {
	if i < 0 || i >= OtpType(len(_OtpTypeIndex)-1) {
		return fmt.Sprintf("OtpType(%d)", i)
	}
	return _OtpTypeName[_OtpTypeIndex[i]:_OtpTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OtpTypeNoOp() {
	var x [1]struct{}
	_ = x[OtpTypeEmail-(0)]
	_ = x[OtpTypeMobile-(1)]
}

var _OtpTypeValues = []OtpType{OtpTypeEmail, OtpTypeMobile}

var _OtpTypeNameToValueMap = map[string]OtpType{
	_OtpTypeName[0:5]:       OtpTypeEmail,
	_OtpTypeLowerName[0:5]:  OtpTypeEmail,
	_OtpTypeName[5:11]:      OtpTypeMobile,
	_OtpTypeLowerName[5:11]: OtpTypeMobile,
}

var _OtpTypeNames = []string{
	_OtpTypeName[0:5],
	_OtpTypeName[5:11],
}

// OtpTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OtpTypeString(s string) (OtpType, error) {
	if val, ok := _OtpTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OtpTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OtpType values", s)
}

// OtpTypeValues returns all values of the enum
func OtpTypeValues() []OtpType {
	return _OtpTypeValues
}

// OtpTypeStrings returns a slice of all String values of the enum
func OtpTypeStrings() []string {
	strs := make([]string, len(_OtpTypeNames))
	copy(strs, _OtpTypeNames)
	return strs
}

// IsAOtpType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OtpType) IsAOtpType() bool {
	for _, v := range _OtpTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for OtpType
func (i OtpType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for OtpType
func (i *OtpType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("OtpType should be a string, got %s", data)
	}

	var err error
	*i, err = OtpTypeString(s)
	return err
}
