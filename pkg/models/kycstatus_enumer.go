// Code generated by "enumer -type=KycStatus -json -transform=snake -trimprefix=KycStatus"; DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _KycStatusName = "pendingverifiedfailed"

var _KycStatusIndex = [...]uint8{0, 7, 15, 21}

const _KycStatusLowerName = "pendingverifiedfailed"

func (i KycStatus) String() string {
	if i < 0 || i >= KycStatus(len(_KycStatusIndex)-1) {
		return fmt.Sprintf("KycStatus(%d)", i)
	}
	return _KycStatusName[_KycStatusIndex[i]:_KycStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _KycStatusNoOp() {
	var x [1]struct{}
	_ = x[KycStatusPending-(0)]
	_ = x[KycStatusVerified-(1)]
	_ = x[KycStatusFailed-(2)]
}

var _KycStatusValues = []KycStatus{KycStatusPending, KycStatusVerified, KycStatusFailed}

var _KycStatusNameToValueMap = map[string]KycStatus{
	_KycStatusName[0:7]:        KycStatusPending,
	_KycStatusLowerName[0:7]:   KycStatusPending,
	_KycStatusName[7:15]:       KycStatusVerified,
	_KycStatusLowerName[7:15]:  KycStatusVerified,
	_KycStatusName[15:21]:      KycStatusFailed,
	_KycStatusLowerName[15:21]: KycStatusFailed,
}

var _KycStatusNames = []string{
	_KycStatusName[0:7],
	_KycStatusName[7:15],
	_KycStatusName[15:21],
}

// KycStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func KycStatusString(s string) (KycStatus, error) {
	if val, ok := _KycStatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _KycStatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to KycStatus values", s)
}

// KycStatusValues returns all values of the enum
func KycStatusValues() []KycStatus {
	return _KycStatusValues
}

// KycStatusStrings returns a slice of all String values of the enum
func KycStatusStrings() []string {
	strs := make([]string, len(_KycStatusNames))
	copy(strs, _KycStatusNames)
	return strs
}

// IsAKycStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i KycStatus) IsAKycStatus() bool {
	for _, v := range _KycStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for KycStatus
func (i KycStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for KycStatus
func (i *KycStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("KycStatus should be a string, got %s", data)
	}

	var err error
	*i, err = KycStatusString(s)
	return err
}
