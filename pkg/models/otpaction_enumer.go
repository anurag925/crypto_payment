// Code generated by "enumer -type=OtpAction -json -transform=snake -trimprefix=OtpAction"; DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _OtpActionName = "transaction_otp"

var _OtpActionIndex = [...]uint8{0, 15}

const _OtpActionLowerName = "transaction_otp"

func (i OtpAction) String() string {
	if i < 0 || i >= OtpAction(len(_OtpActionIndex)-1) {
		return fmt.Sprintf("OtpAction(%d)", i)
	}
	return _OtpActionName[_OtpActionIndex[i]:_OtpActionIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OtpActionNoOp() {
	var x [1]struct{}
	_ = x[OtpActionTransactionOtp-(0)]
}

var _OtpActionValues = []OtpAction{OtpActionTransactionOtp}

var _OtpActionNameToValueMap = map[string]OtpAction{
	_OtpActionName[0:15]:      OtpActionTransactionOtp,
	_OtpActionLowerName[0:15]: OtpActionTransactionOtp,
}

var _OtpActionNames = []string{
	_OtpActionName[0:15],
}

// OtpActionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OtpActionString(s string) (OtpAction, error) {
	if val, ok := _OtpActionNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OtpActionNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OtpAction values", s)
}

// OtpActionValues returns all values of the enum
func OtpActionValues() []OtpAction {
	return _OtpActionValues
}

// OtpActionStrings returns a slice of all String values of the enum
func OtpActionStrings() []string {
	strs := make([]string, len(_OtpActionNames))
	copy(strs, _OtpActionNames)
	return strs
}

// IsAOtpAction returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OtpAction) IsAOtpAction() bool {
	for _, v := range _OtpActionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for OtpAction
func (i OtpAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for OtpAction
func (i *OtpAction) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("OtpAction should be a string, got %s", data)
	}

	var err error
	*i, err = OtpActionString(s)
	return err
}
