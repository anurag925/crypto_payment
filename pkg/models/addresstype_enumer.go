// Code generated by "enumer -type=AddressType -json -transform=snake -trimprefix=AddressType"; DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _AddressTypeName = "residentialbusiness"

var _AddressTypeIndex = [...]uint8{0, 11, 19}

const _AddressTypeLowerName = "residentialbusiness"

func (i AddressType) String() string {
	if i < 0 || i >= AddressType(len(_AddressTypeIndex)-1) {
		return fmt.Sprintf("AddressType(%d)", i)
	}
	return _AddressTypeName[_AddressTypeIndex[i]:_AddressTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AddressTypeNoOp() {
	var x [1]struct{}
	_ = x[AddressTypeResidential-(0)]
	_ = x[AddressTypeBusiness-(1)]
}

var _AddressTypeValues = []AddressType{AddressTypeResidential, AddressTypeBusiness}

var _AddressTypeNameToValueMap = map[string]AddressType{
	_AddressTypeName[0:11]:       AddressTypeResidential,
	_AddressTypeLowerName[0:11]:  AddressTypeResidential,
	_AddressTypeName[11:19]:      AddressTypeBusiness,
	_AddressTypeLowerName[11:19]: AddressTypeBusiness,
}

var _AddressTypeNames = []string{
	_AddressTypeName[0:11],
	_AddressTypeName[11:19],
}

// AddressTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AddressTypeString(s string) (AddressType, error) {
	if val, ok := _AddressTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AddressTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AddressType values", s)
}

// AddressTypeValues returns all values of the enum
func AddressTypeValues() []AddressType {
	return _AddressTypeValues
}

// AddressTypeStrings returns a slice of all String values of the enum
func AddressTypeStrings() []string {
	strs := make([]string, len(_AddressTypeNames))
	copy(strs, _AddressTypeNames)
	return strs
}

// IsAAddressType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AddressType) IsAAddressType() bool {
	for _, v := range _AddressTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for AddressType
func (i AddressType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for AddressType
func (i *AddressType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("AddressType should be a string, got %s", data)
	}

	var err error
	*i, err = AddressTypeString(s)
	return err
}
