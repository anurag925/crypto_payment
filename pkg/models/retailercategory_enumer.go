// Code generated by "enumer -type=RetailerCategory -json -transform=snake -trimprefix=RetailerCategory"; DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _RetailerCategoryName = "unknown"

var _RetailerCategoryIndex = [...]uint8{0, 7}

const _RetailerCategoryLowerName = "unknown"

func (i RetailerCategory) String() string {
	if i < 0 || i >= RetailerCategory(len(_RetailerCategoryIndex)-1) {
		return fmt.Sprintf("RetailerCategory(%d)", i)
	}
	return _RetailerCategoryName[_RetailerCategoryIndex[i]:_RetailerCategoryIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _RetailerCategoryNoOp() {
	var x [1]struct{}
	_ = x[RetailerCategoryUnknown-(0)]
}

var _RetailerCategoryValues = []RetailerCategory{RetailerCategoryUnknown}

var _RetailerCategoryNameToValueMap = map[string]RetailerCategory{
	_RetailerCategoryName[0:7]:      RetailerCategoryUnknown,
	_RetailerCategoryLowerName[0:7]: RetailerCategoryUnknown,
}

var _RetailerCategoryNames = []string{
	_RetailerCategoryName[0:7],
}

// RetailerCategoryString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func RetailerCategoryString(s string) (RetailerCategory, error) {
	if val, ok := _RetailerCategoryNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _RetailerCategoryNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to RetailerCategory values", s)
}

// RetailerCategoryValues returns all values of the enum
func RetailerCategoryValues() []RetailerCategory {
	return _RetailerCategoryValues
}

// RetailerCategoryStrings returns a slice of all String values of the enum
func RetailerCategoryStrings() []string {
	strs := make([]string, len(_RetailerCategoryNames))
	copy(strs, _RetailerCategoryNames)
	return strs
}

// IsARetailerCategory returns "true" if the value is listed in the enum definition. "false" otherwise
func (i RetailerCategory) IsARetailerCategory() bool {
	for _, v := range _RetailerCategoryValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for RetailerCategory
func (i RetailerCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for RetailerCategory
func (i *RetailerCategory) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("RetailerCategory should be a string, got %s", data)
	}

	var err error
	*i, err = RetailerCategoryString(s)
	return err
}
